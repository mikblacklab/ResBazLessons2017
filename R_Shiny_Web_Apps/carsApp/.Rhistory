aa
p<-list()
for(n in 2:10){
p[[n-1]]<-0
for(i in 1:1000){
x<-rpois(n,10)
y<-rbinom(n,x,0.5)
p[[n-1]][i]<-qbeta(0.95,sum(y)+1,sum(x-y)+1) <= 0.6
}
}
aa<-unlist(lapply(p,function(x) prop.table(table(x))[2]))
names(aa)<-seq(2,10)
aa
p<-list()
for(n in 2:10){
p[[n-1]]<-0
for(i in 1:1000){
x<-rpois(n,10)
y<-rbinom(n,x,0.5)
p[[n-1]][i]<-qbeta(0.95,sum(y)+1,sum(x-y)+1) <= 0.7
}
}
aa<-unlist(lapply(p,function(x) prop.table(table(x))[2]))
names(aa)<-seq(2,10)
aa
plot(2:10,aa)
?plot
plot(2:10,aa,type="b")
plot(2:10,aa,type="b",pch=16)
plot(2:10,aa,type="b",pch=16,col='lightblue')
p<-list()
theta<-c(0.5,0.2,0.01)
for(j in 1:3){
p[[j]]<-list()
for(n in 2:10){
p[[j]][[n-1]]<-0
for(i in 1:1000){
x<-rpois(n,10)
y<-rbinom(n,x,theta[j])
p[[j]][[n-1]][i]<-qbeta(0.95,sum(y)+1,sum(x-y)+1) <= 0.7
}
}
}
p
aa<-list()
for(i in 1:3) aa[[i]]<-unlist(lapply(p[[i]],function(x) prop.table(table(x))[2]))
plot(2:10,aa[[1]],type="b",pch=16,col='lightblue')
lines(2:10,aa[[2]],type="b",pch=16,col='lightpink')
lines(2:10,aa[[2]],type="b",pch=16,col='lightgreen')
q()
library(Gviz)
library(BiocInstaller)
?BiocUpgrade
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
biocLite("BiocInstaller")
q()
library(BiocInstaller)
biocLite('limma')
biocLite("BiocUpgrade")
biocLite("BiocUpgrade")
library(Gviz)
ls()
getwd()
q()
q()
q()
q()
q)
1()
q()
q()
>options
?options
q()
library(CNA)
library(WCA)
??collapseRows
a<-data.frame(matrix(20,5,4))
a
rownames(a)<-rep("a",5)
library(WGCNA)
b<-collapseRows(a,rowGroup=c("A","B","B","C","C"))
b<-collapseRows(a,rowGroup=c("A","B","B","C","C"),rowID=1:5)
b
a<-data.frame(matrix(20,5,4))
a
a<-data.frame(matrix(rnorm(20),5,4))
b<-collapseRows(a,rowGroup=c("A","B","B","C","C"),rowID=6:10)
b<-collapseRows(a,rowGroup=c("A","B","B","C","C"),rowID=1:5)
b
a<-data.frame(matrix(20,5,4))
a
rownames(a)<-rep("a",5)
a<-matrix(20,5,4)
rownames(a)<-rep("a",5)
a
b<-collapseRows(a,rowGroup=c("A","B","B","C","C"),rowID=rownames(a))
a<-matrix(20,5,4)
b<-collapseRows(a,rowGroup=c("A","B","B","C","C"),rowID=rownames(a))
rownames(a)
rownames(a)<-1:5
b<-collapseRows(a,rowGroup=c("A","B","B","C","C"),rowID=rownames(a))
b
z<-b$datETcollapsed
class(z)
z
q()
q()
z<-rnorm(10000)
z2<-z^2
hist(z2)
x<-z2+rnorm(10000,0,0.2)
cor(x,z2)
x<-z2+rnorm(10000,0,0.5)
cor(x,z2)
plot(x,z2)
fit<-lm(z2~x)
fit
hist(fit$residuals)
x<-z+rnorm(10000,0,0.5)
plot(x,z)
plot(x,z2)
fit<-lm(z2~x)
hist(fit$residuals)
hist(fit$residuals,100)
x<-z+rnorm(10000,0,1)
plot(x,z)
plot(x,z2)
fit<-lm(z2~x)
hist(fit$residuals)
hist(fit$residuals,100)
x<-z+rnorm(10000,0,0.1)
plot(x,z)
plot(x,z2)
fit<-lm(z2~x)
hist(fit$residuals,100)
x<-z+rnorm(10000,0,3)
plot(x,z)
plot(x,z2)
fit<-lm(z2~x)
hist(fit$residuals,100)
plot(x,z)
x<-z+rnorm(10000,0,1)
y<-z+rnorm(10000,0,1)
fit<-lm(z2~x+y)
hist(fit$residuals,100)
x<-z+rnorm(10000,0,.3)
y<-z+rnorm(10000,0,.3)
plot(x,z)
plot(x,z2)
fit<-lm(z2~x+y)
hist(fit$residuals,100)
summary(fit)
x<-z+rnorm(10000,0,.1)
y<-z+rnorm(10000,0,.1)
plot(x,z)
plot(x,z2)
fit<-lm(z2~x+y)
hist(fit$residuals,100)
summary(fit)
x<-z2+rnorm(10000,0,.1)
y<-z2+rnorm(10000,0,.1)
plot(x,z)
plot(x,z2)
fit<-lm(z2~x+y)
hist(fit$residuals,100)
x<-z2+rnorm(10000,0,2)
y<-z2+rnorm(10000,0,2)
plot(x,z)
plot(x,z2)
fit<-lm(z2~x+y)
hist(fit$residuals,100)
x<-z2+rnorm(10000,0,5)
y<-z2+rnorm(10000,0,5)
plot(x,z)
plot(x,z2)
fit<-lm(z2~x+y)
hist(fit$residuals,100)
summary(fit)
x<-rnorm(10000,0,5)
y<-rnorm(10000,0,5)
fit<-lm(z2~x+y)
hist(fit$residuals,100)
summary(fit)
coef(fit)
summary(fit)$coef
summary(fit)$coef[2,3]
tt<-c()
for(i in 1:10000){
x<-rnorm(10000,0,5)
fit<-lm(z2~x)
tt[i]<-summary(fit)$coef[2,3]
}
hist(tt)
i
hist(tt,100)
tt<-c()
for(i in 1:10000){
x<-rnorm(10000,0,5)
fit<-lm(z2~x)
tt[i]<-summary(fit)$coef[2,3]
}
hist(tt)
hist(tt,100)
summary(fit)$coef
tt<-matrix(0,10000,2)
for(i in 1:10000){
x<-rnorm(10000,0,5)
fit<-lm(z2~x)
tt[i,]<-summary(fit)$coef[2,3:4]
}
hist(tt[,1],100)
sum(tt[,2]<0.05)
sum(tt[,2]<0.05)/10000
uu<-matrix(0,10000,2)
for(i in 1:10000){
x<-rnorm(10000,0,5)
fit<-lm(z~x)
uu[i,]<-summary(fit)$coef[2,3:4]
}
hist(uu[,1],100)
sum(tt[,2]<0.05)
sum(tt[,2]<0.05)/10000
sum(uu[,2]<0.05)/10000
pbinom(0.05,10000,0.05)
?pbinom
qbinom(0.05,10000,0.05)
qbinom(0.025,10000,0.05)
qbinom(0.975,10000,0.05)
qbinom(c(0.025,0.975),sz,0.05)
sz<-10000
qbinom(c(0.025,0.975),sz,0.05)
sz<-100000
uu<-tt<-matrix(0,sz,2)
for(i in 1:sz){
cat(i,"\n")
x<-rnorm(sz,0,5)
fit<-lm(z2~x)
tt[i,]<-summary(fit)$coef[2,3:4]
fit<-lm(z~x)
uu[i,]<-summary(fit)$coef[2,3:4]
}
sz<-100000
z<-rnorm(sz)
z2<-z^2
uu<-tt<-matrix(0,sz,2)
for(i in 1:sz){
cat(i,"\n")
x<-rnorm(sz,0,5)
fit<-lm(z2~x)
tt[i,]<-summary(fit)$coef[2,3:4]
fit<-lm(z~x)
uu[i,]<-summary(fit)$coef[2,3:4]
}
sz<-100000
z<-rnorm(1000)
z2<-z^2
uu<-tt<-matrix(0,sz,2)
for(i in 1:sz){
cat(i,"\n")
x<-rnorm(1000,0,5)
fit<-lm(z2~x)
tt[i,]<-summary(fit)$coef[2,3:4]
fit<-lm(z~x)
uu[i,]<-summary(fit)$coef[2,3:4]
}
par(mfrow=c(1,2))
hist(tt[,1],100)
hist(uu[,1],100)
sum(tt[,2]<0.05)/sz
sum(uu[,2]<0.05)/sz
qbinom(c(0.025,0.975),sz,0.05)
save.image('tony-z2.RData')
q()
n
q()
q()
library(networkD3)
runApp('Research/ShinyServer/mikNet/')
library(shiny)
runApp('Research/ShinyServer/mikNet/')
runApp('Research/ShinyServer/mikNet/')
runApp('Research/ShinyServer/mikNet/')
q()
q()
lapply(1:5,function(x) rnorm(10,x,1))
matrix(unlist(lapply(1:5,function(x) rnorm(10,x,1))),5,10)
y<-matrix(unlist(lapply(1:5,function(x) rnorm(10,x,1))),5,10)
heatmap(y)
y<-matrix(unlist(lapply(1:20,function(x) rnorm(50,x,1))),20,50)
library(gplots)
heatmap.2(y,trace='none')
heatmap.2(y,trace='none',scale='row',col='bluered')
y<-matrix(unlist(lapply(seq(1,20)/10,function(x) rnorm(50,x,1))),20,50)
library(gplots)
heatmap.2(y,trace='none',scale='row',col='bluered')
y<-matrix(unlist(lapply(seq(1,20)/5,function(x) rnorm(50,x,1))),20,50)
library(gplots)
heatmap.2(y,trace='none',scale='row',col='bluered')
heatmap.2(y,trace='none',scale='row',col='bluered')
hist(y)
sd(y)
dim(y)
apply(y,1,sd)
apply(y,1,mean)
z<-apply(y,1,scale)
z[1,]
mean(z[1,]
)
dim(z)
dim(y)
z<-t(apply(y,1,scale))
mean(z[1,])
sd(z[1,])
unscaledMG<-svd(y)$v[,1]
z<-t(apply(y,1,scale))
scaledMG<-svd(z)$v[,1]
cor(unscaledMG,scaledMG,method="spearman")
heatmap.2(y,trace='none',scale='none',col='bluered')
mean(rgamma(1,5,1))
mean(rgamma(100,5,1))
mean(rgamma(100,50,1))
mean(rgamma(100,1,1))
sd(rgamma(100,1,1))
range(rgamma(100,1,1))
range(rgamma(100,1,0.5))
range(rgamma(100,1,10))
range(rgamma(100,1,2))
range(rgamma(100,2,2))
range(rgamma(100,5,2))
range(rgamma(100,5,5))
range(rgamma(100,5,3))
range(rgamma(100,5,5))
y<-matrix(unlist(lapply(seq(1,20)/5,function(x) rnorm(50,x,rgamma(50,5,5)))),20,50)
## Load the gplots library (better heatmap function)
library(gplots)
## Generate a heatmap of the data, and scale rows to mean 0, sd
heatmap.2(y,trace='none',scale='none',col='bluered')
heatmap.2(y,trace='none',scale='none',col='bluered',Rowv=F)
heatmap.2(y,trace='none',scale='none',col='bluered',Colv=F)
y<-matrix(unlist(lapply(rnorm(20),function(x) rnorm(50,x,1),20,50)
## Load the gplots library (better heatmap function)
library(gplots)
## Generate a heatmap of the data, and scale rows to mean 0, sd
heatmap.2(y,trace='none',scale='none',col='bluered',Colv=F)
y<-matrix(unlist(lapply(rnorm(20,1,2),function(x) rnorm(50,x,1),20,50)
y<-matrix(unlist(lapply(rnorm(20,1,2),function(x) rnorm(50,x,1))),20,50)
heatmap.2(y,trace='none',scale='none',col='bluered',Colv=F)
unscaledMG<-svd(y)$v[,1]
z<-t(apply(y,1,scale))
scaledMG<-svd(z)$v[,1]
## In this case the metagenes are virtually identical, because of my simulation method
cor(unscaledMG,scaledMG,method="spearman")
y<-matrix(unlist(lapply(seq(1,20)/5,function(x) rnorm(50,x,1))),20,50)
## Load the gplots library (better heatmap function)
library(gplots)
## Generate a heatmap of the data, and scale rows to mean 0, sd
heatmap.2(y,trace='none',scale='none',col='bluered',Colv=F)
## Generate metagene via SVD
unscaledMG<-svd(y)$v[,1]
z<-t(apply(y,1,scale))
scaledMG<-svd(z)$v[,1]
## In this case the metagenes are virtually identical, because of my simulation method
cor(unscaledMG,scaledMG,method="spearman")
mgCol<-bluered(length(scaledMG))[rank(scaledMG)]
ord<-order(scaled(mg))
heatmap.2(y[,ord],trace='none',scale='none',col='bluered',Colv=F,ColSideColors=mgCol)
mgCol<-bluered(length(scaledMG))[rank(scaledMG)]
ord<-order(scaled(mg))
heatmap.2(y[,ord],trace='none',scale='none',col='bluered',Colv=F,ColSideColors=mgCol)
mgCol<-bluered(length(scaledMG))[rank(scaledMG)]
ord<-order(scaledMG)
heatmap.2(y[,ord],trace='none',scale='none',col='bluered',Colv=F,ColSideColors=mgCol)
ord<-order(scaledMG,decreasing=T)
heatmap.2(y[,ord],trace='none',scale='none',col='bluered',Colv=F,ColSideColors=mgCol)
heatmap.2(y[,ord],trace='none',scale='none',col='bluered',Colv=F,ColSideColors=mgCol[ord])
ord<-order(scaledMG,decreasing=T)
heatmap.2(y[,ord],trace='none',scale='none',col='bluered',Colv=F,ColSideColors=mgCol[ord])
scaledMG <- -scaledMG
mgCol<-bluered(length(scaledMG))[rank(scaledMG)]
ord<-order(scaledMG,decreasing=T)
heatmap.2(y[,ord],trace='none',scale='none',col='bluered',Colv=F,ColSideColors=mgCol[ord])
mgCol<-bluered(length(scaledMG))[rank(scaledMG)]
ord<-order(scaledMG,decreasing=F)
heatmap.2(y[,ord],trace='none',scale='none',col='bluered',Colv=F,ColSideColors=mgCol[ord])
heatmap.2(y[,ord],trace='row',scale='none',col='bluered',Colv=F,ColSideColors=mgCol[ord])
heatmap.2(y[,ord],trace='none',scale='row',col='bluered',Colv=F,ColSideColors=mgCol[ord])
scaledMG
ord
rownames(y)<-paste("Gene",1:20,sep='')
colnames(y)<-paste("Sample",1:50,sep='')
heatmap.2(y,trace='none',scale='none',col='bluered')
## Generate metagene via SVD
unscaledMG<-svd(y)$v[,1]
z<-t(apply(y,1,scale))
scaledMG<-svd(z)$v[,1]
## In this case the metagenes are virtually identical, because of my simulation method
cor(unscaledMG,scaledMG,method="spearman")
## Add metagene to top of heatmap, and order samples by metagene value
mgCol<-bluered(length(scaledMG))[rank(scaledMG)]
ord<-order(scaledMG,decreasing=T)
heatmap.2(y[,ord],trace='none',scale='none',col='bluered',Colv=F,ColSideColors=mgCol[ord])
ord<-order(scaledMG)
heatmap.2(y[,ord],trace='none',scale='none',col='bluered',Colv=F,ColSideColors=mgCol[ord])
scaledMG <- -scaledMG
mgCol<-bluered(length(scaledMG))[rank(scaledMG)]
ord<-order(scaledMG)
heatmap.2(y[,ord],trace='none',scale='row',col='bluered',Colv=F,ColSideColors=mgCol[ord])
heatmap.2(y,trace='none',scale='row',col='bluered')
set.seed(123)
y<-matrix(unlist(lapply(seq(1,20)/5,function(x) rnorm(50,x,1))),20,50)
rownames(y)<-paste("Gene",1:20,sep='')
colnames(y)<-paste("Sample",1:50,sep='')
## Load the gplots library (better heatmap function)
library(gplots)
## Generate a heatmap of the data, and scale rows to mean 0, sd 1
heatmap.2(y,trace='none',scale='row',col='bluered')
## Generate metagene via SVD
unscaledMG<-svd(y)$v[,1]
z<-t(apply(y,1,scale))
scaledMG<-svd(z)$v[,1]
## In this case the metagenes are virtually identical, because of my simplistic
## simulation method
cor(unscaledMG,scaledMG,method="spearman")
## Add metagene to top of heatmap, and order samples by metagene value
mgCol<-bluered(length(scaledMG))[rank(scaledMG)]
ord<-order(scaledMG)
heatmap.2(y[,ord],trace='none',scale='none',col='bluered',Colv=F,ColSideColors=mgCol[ord])
## In this case the "high" metagene value relates to low expression levels of the
## genes - since the sign of the first eigenvector is arbitrary, just flip the
## sign of the metagene
scaledMG <- -scaledMG
mgCol<-bluered(length(scaledMG))[rank(scaledMG)]
ord<-order(scaledMG)
heatmap.2(y[,ord],trace='none',scale='row',col='bluered',Colv=F,ColSideColors=mgCol[ord])
q()
n
library(limma)
vignette(limma)
vignette('limma')
q()
q()
??hazard ratio
??hazard
n <- 500
set.seed(1)
age <- 50 + 12*rnorm(n)
cens <- 15*runif(n)
h <- .02*exp(.04*(age-50))
d.time <- -log(runif(n))/h
label(d.time) <- 'Follow-up Time'
e <- ifelse(d.time <= cens,1,0)
d.time <- pmin(d.time, cens)
units(d.time) <- "Year"
hazard.ratio.plot(age, Surv(d.time,e), e=20, legendloc='ll')
library(rms)
n <- 500
set.seed(1)
age <- 50 + 12*rnorm(n)
cens <- 15*runif(n)
h <- .02*exp(.04*(age-50))
d.time <- -log(runif(n))/h
label(d.time) <- 'Follow-up Time'
e <- ifelse(d.time <= cens,1,0)
d.time <- pmin(d.time, cens)
units(d.time) <- "Year"
hazard.ratio.plot(age, Surv(d.time,e), e=20, legendloc='ll')
setwd('/Users/black/GitHub/resbaz_lessons/R_Shiny_Web_Apps')
q()
library(testthat)
library(cats)
cat_function()
expect_output(cat_function(), "I love cats!")
expect_output(cat_function(), "no I don't")
getwd()
setwd('Slidify/ResBaz2016/mblack-resbaz2016/cats/')
getwd()
dir()
devtools::use_testthat()
devtools::build()
??testthat
devtools::test
devtools::test()
devtools::test()
devtools::test()
devtools::test()
getwd()
setwd('~/GitHub/resbaz_lessons/')
setwd('~/GitHub/resbaz_lessons/R_Shiny_Web_Apps/')
dir()
library(shiny)
runApp('carsApp')
setwd("~/GitHub/resbaz_lessons/R_Shiny_Web_Apps/carsApp")
runApp()
runApp('carsApp')
runApp('')
getwd()
dir()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
q()
